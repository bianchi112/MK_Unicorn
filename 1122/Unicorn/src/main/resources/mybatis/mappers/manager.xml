<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="manager">
	<!-- 설정 가능 -->

	<!-- ex) -->
	<!-- select가 여러개 일 수 있기 때문에 id값이 필요하고, resultType은 소문자 int, string, map, 
		list 다 가능 -->
	<!-- <select id="selectEmp" resultType="com.human.mybatis22.dto.EmpDTO"> -->
	<!-- select * from emp -->
	<!-- </select> -->

	<!-- 예시: resultType을 사용하는 경우 -->
	<!-- <resultMap type="memberDTO" id="memberResultMap"> -->
	<!-- <result property="user_no" column="userNo" /> -->
	<!-- <result property="id" column="id" /> -->
	<!-- <result property="pw" column="pw" /> -->
	<!-- <result property="name" column="name" /> -->
	<!-- <result property="address" column="address" /> -->
	<!-- <result property="address_details" column="addressdetails" /> -->
	<!-- <result property="postcode" column="postcode" /> -->
	<!-- <result property="tel" column="tel" /> -->
	<!-- <result property="email" column="email" /> -->
	<!-- <result property="userpoint" column="userpoint" /> -->
	<!-- <result property="grade" column="grade" /> -->
	<!-- <result property="signupdate" column="signupdate" /> -->
	<!-- </resultMap> -->

	<!-- <select id="memberList" parameterType="memberDTO" -->
	<!-- resultMap="memberResultMap"> -->
	<!-- select * -->
	<!-- from ( -->
	<!-- select rownum rnum, tmp.* -->
	<!-- from( -->
	<!-- select users.* -->
	<!-- from -->
	<!-- users -->
	<!-- order by userNo asc -->
	<!-- ) tmp -->
	<!-- ) -->
	<!-- where rnum <![CDATA[ >= ]]> -->
	<!-- #{startNum} and rnum <![CDATA[ <= ]]> -->
	<!-- #{endNum} -->

	<!-- </select> -->

	<select id="memberList" parameterType="memberDTO"
		resultType="memberDTO">
		select *
		from (
		select rownum rnum, tmp.*
		from(
		select users.*
		from
		users
		order by userNo asc
		) tmp
		)
		where rnum <![CDATA[ >= ]]>
		#{startNum} and rnum <![CDATA[ <= ]]>
		#{endNum}

	</select>
	<select id="memberTotal" resultType="int">
		select count(*) from
		users

	</select>
	<!-- 회원 삭제 (여러 명) -->
	<delete id="deleteMembers" parameterType="list">
		DELETE FROM users
		WHERE userNo IN
		<foreach collection="list" item="userNo" open="("
			separator="," close=")">
			#{userNo}
		</foreach>
	</delete>

	<!-- 회원 조회 -->
	<select id="getMemberByMemberNo" parameterType="int"
		resultType="memberDTO">
		SELECT *
		FROM users
		WHERE userno = #{memberNo}
	</select>




	<!-- 공지사항 -->
	<select id="noticeList" parameterType="noticeDTO"
		resultType="noticeDTO">
		select *
		from (
		select rownum rnum, tmp.*
		from (
		select notice.*
		from notice
		order by noticeDate desc 
		) tmp
		)
		where rnum <![CDATA[ >= ]]>
		#{startNum} and rnum <![CDATA[ <= ]]>
		#{endNum}
	</select>

	<select id="noticeTotal" resultType="int">
		select count(*) from
		notice

	</select>


	<select id="getNoticeByNoticeNo" parameterType="String"
		resultType="NoticeDTO">
		SELECT * FROM notice WHERE noticeNo = #{noticeNo}
	</select>

	<select id="updateNotice" parameterType="noticeDTO">
		UPDATE notice
		set
		noticeNo = #{noticeNo},
		noticeTitle = #{noticeTitle},
		noticeDetails =
		#{noticeDetails},
		noticeDate = #{noticeDate}
		WHERE noticeNo =
		#{noticeNo}
	</select>

	<select id="getNextNoticeSeq" resultType="int">
		SELECT
		notice_seq.nextval FROM dual
	</select>

	<insert id="insertNotice" parameterType="noticeDTO">
		INSERT INTO notice
		(noticeNo, noticeTitle, noticeDetails, noticeDate)
		VALUES (#{noticeNo},
		#{noticeTitle}, #{noticeDetails}, #{noticeDate})
	</insert>

	<delete id="deleteNotices" parameterType="list">
		DELETE FROM notice WHERE noticeNo IN
		<foreach collection="list" item="item" open="(" separator=","
			close=")">
			#{item}
		</foreach>
	</delete>



</mapper>
